from my_tools.tools import timer, is_prime

"""
Задача 58
Начиная с 1 и продвигаясь по спирали в направлении против часовой стрелки, получается 
квадратная спираль с длиной стороны 7
37 36 35 34 33 32 31
38 17 16 15 14 13 30
39 18  5  4  3 12 29
40 19  6  1  2 11 28
41 20  7  8  9 10 27
42 21 22 23 24 25 26
43 44 45 46 47 48 49
Интересно заметить, что нечетные квадраты лежат на правой нижней полудиагонали. Еще интереснее 
то, что среди 13 чисел, лежащих на обеих диагоналях, 8 являются простыми; т.е. отношение составляет 
8/13 ≈ 62%.
Если добавить еще один целый слой вокруг изображенной выше спирали, получится квадратная спираль 
с длиной стороны 9. Если продолжать данный процесс, какой будет длина стороны квадратной спирали, 
у которой отношение количества простых чисел к количеству всех чисел на обеих диагоналях упадет ниже 10%?
"""


@timer
def problem_58(n=0.1):
    all_nums = 1
    prime_nums = 0
    i = 3
    while True:
        x1 = i ** 2
        x2 = i ** 2 - 1 * (i - 1)
        x3 = i ** 2 - 2 * (i - 1)
        x4 = i ** 2 - 3 * (i - 1)
        all_nums += len([x1, x2, x3, x4])
        prime_nums += len([x for x in [x1, x2, x3, x4] if is_prime(x)])
        if prime_nums / all_nums <= n:
            return i
        i += 2


if __name__ == "__main__":
    print(problem_58())
