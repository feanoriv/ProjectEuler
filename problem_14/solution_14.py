from my_tools.tools import timer

"""
Задача 14
Следующая повторяющаяся последовательность определена для множества натуральных чисел:
n → n/2 (n - четное)
n → 3n + 1 (n - нечетное)
Используя описанное выше правило и начиная с 13, сгенерируется следующая последовательность:
13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
Получившаяся последовательность (начиная с 13 и заканчивая 1) содержит 10 элементов. Хотя это до сих пор 
и не доказано (проблема Коллатца (Collatz)), предполагается, что все сгенерированные таким образом 
последовательности оканчиваются на 1.
Какой начальный элемент меньше миллиона генерирует самую длинную последовательность?
Примечание: Следующие за первым элементы последовательности могут быть больше миллиона.
"""


@timer
def problem_14(n=1000000):
    res = [1, 1]
    dict_results = {}
    for ind in range(1, n):
        i = ind
        k = 1
        while i != 1:
            if i % 2 == 0:
                i = i / 2
                k += 1
            else:
                i = 3 * i + 1
                k += 1
            if i in dict_results.keys():  # Если ключ уже есть, то нет необходимости ещё раз считать
                k += dict_results[i]
                i = 1
            if i == 1:
                dict_results[ind] = k  # В словарь добавляются {число:путь}
                if res[1] < k:
                    res = [ind, k]
    return res[0]


if __name__ == "__main__":
    print(problem_14())
