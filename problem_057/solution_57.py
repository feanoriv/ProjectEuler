from my_tools.tools import timer

"""
Задача 57
Можно убедиться в том, что квадратный корень из двух можно выразить в виде 
бесконечно длинной дроби.
√ 2 = 1 + 1/(2 + 1/(2 + 1/(2 + ... ))) = 1.414213...
Приблизив это выражение для первых четырех итераций, получим:
1 + 1/2 = 3/2 = 1.5
1 + 1/(2 + 1/2) = 7/5 = 1.4
1 + 1/(2 + 1/(2 + 1/2)) = 17/12 = 1.41666...
1 + 1/(2 + 1/(2 + 1/(2 + 1/2))) = 41/29 = 1.41379...
Следующие три приближения: 99/70, 239/169 и 577/408, а восьмое приближение, 
1393/985, является первым случаем, в котором количество цифр в числителе 
превышает количество цифр в знаменателе.
У скольких дробей длина числителя больше длины знаменателя в первой тысяче 
приближений выражения?
"""


@timer
def problem_57(n=10000):
    x1, x2, res = 1, 2, 0
    for i in range(n-1):
        x1, x2 = x2, 2 * x2 + x1
        if not len(str(x1+x2)) == len(str(x2)):
            res += 1
    return res


if __name__ == "__main__":
    print(problem_57())
